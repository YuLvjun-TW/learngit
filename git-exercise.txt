1.本地初始化名为learngit的仓库，并配置gitignore文件，
忽略掉所有 .class, .log, .jar, .war文件以及.mtj.tmp文件夹下的所有内容。
将该本地仓库推送到个人github中。
git init

gitignore文件内容
*.class
*.log
*.jar
*.war
.mtj.tmp/

将该本地仓库推送到个人github中
git remote add origin https://github.com/ylj758/learngit.git
git push -u origin master

2.仅执行 clone learngit 仓库的 dev 分支到本地。
分别使用 switch和checkout命令在本地创建 feature-1 分支并对应到远程该分支。

git clone -b dev https://github.com/ylj758/learngit.git

创建并切换到新的分支feature-1 
git checkout -b feature-1
或者
git switch -c feature-1

将本地分支推送到与之存在追踪关系的远程分支
git push origin feature-1:dev

3.当不在同一个地方的两个开发人员需要pair着完成同一个故事卡内容的开发，
如何交替使用每个人的电脑进行协同开发？请写出这个过程中所涉及的 git 命令。
例如：在 tdd 的过程中，一个人先在自己的机子上写了测试，
然后另一个人需要在自己机子上依据测试来写实现。
(提示：可以新建一个协同开发分支，分别提交然后拉取的方式，进行协调工作)
xiaoming:
git clone http:XXX
git pull
git add .
git commit "XXX"
git push

xiaowang:
git clone http:XXX
git pull
git add .
git commit "XXX"
git push
如果xiaoming修改了一个文件并push了
此时xiaowang修改了这个文件并尝试push，这个操作肯定会失败
首先需要 git pull此时会出现conflict，
使用git status可以查看发生冲突的文件，手动编辑
然后git add .、git commit "XXX"

4.
将本地仓库版本回退到两次提交之前的版本后，突然发现回退错了，
想将回退后的仓库版本还原到执行回退操作之前的版本。
git log
git reset --hard commit_id

5.将本地 feature-1 分支内容推到 github 上 git@github.com:cheny/learngit.git 仓库中的 master 分支上。
git checkout master
git merge feature-1
git add .
git commit
git pull
git push origin feature-1:master

6.版本发布后，需要给代码库打 tag，tag 名为v0.1，描述信息为version 0.1 released。
并将该 tag 推到远程分支。以及如何删除本地和远程仓库名为 v0.9的 tag。
git tag -a v0.1 -m "version 0.1 released"
git push origin v0.1
git tag -d v0.9
git push origin :refs/tags/v0.9


7.开始了一天的工作，先从 feature-1 分支拉取了最新的代码，然后开始对故事卡的内容进行开发。
开发到一半的时候，接到 QA 通知，需要在 dev分支上紧急修复一个 bug。
当你在dev分支上修复完成并提交后，又有其他人在 dev分支上提交了新的内容。
接着收到通知，需要仅仅将修复该 bug 的提交内容合并到 master 分支上，
该修复内容之后的提交不能一起合并到 master 分支上。全部操作完成后，
回到 feature-1分支继续进行卡的开发工作。（提示： stash 、 cherry-pick）
git checkout feature-1
git pull
git add .
git commit

git checkout dev
git add .
git commit
git pull
git add .
git commit
git pull
git push

git checkout master
git log
git cherry-pick commit_id

git checkout feature-1

8.显示提交人为 cheny的从 2020.04.02到 2020.08.06的所有提交记录，
只显示提交的 message 即可，不需要显示详细内容。
git log --since=2020-04-02 --until=2020-08-06 --author="cheny" --pretty=short


9.将远程代码库中的提交回滚到 id 为 01e31c的提交。
git reset --hard 01e31c
git push -f origin master


10.如何修改倒数第 5 次（HEAD~5）提交的 message 信息。
如果要将此次修改同步到远程仓库，如何操作？应该注意什么，如果不注意会造成什么后果
git rebase -i HEAD~5
git commit --amend
git push --force
注意别人是否修改了代码，如果没有，提醒别人pull最新的代码

11.简述 merge 和 rebase的区别。
merge 会把公共分支和你当前的commit 合并在一起，形成一个新的 commit 提交
rebase会把你当前分支的 commit 放到公共分支的最后面,所以叫变基。就好像你从公共分支又重新拉出来这个分支一样。

12.简述fetch 分别与 pull和 pull --rebase的区别。
git pull = git fetch + git merge
git pull --rebase = git fetch + git rebase


13.简述 git 中工作区、暂存区和版本库的区别。
工作区：电脑里能看到的目录。
暂存区：一般存放在.git目录下下的index文件（.git/index）中，所以我们把暂存区有时也叫作索引（index）,git add之后放到暂存。
版本库：工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。


14.简述使用 feature 分支模式进行开发的流程中（拉取代码、创建分支、开发完成后合并分支解决冲突）如何使用一些列的 git 命令。
（如 pull, commit, merge, add, fetch,push等）
git clone 
git checkout -b feature
git add .
git commit 
git checkout master
git merge 将两个分支合并
git status 查看发生冲突的文件,手动编辑后提交
git add .
git commit
git pull 
git push



